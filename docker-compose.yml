version: '3.8'

services:
  # Base de donn√©es SQL Server
  database:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: lab_stock_db
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=StrongPassword123!
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - db_data:/var/opt/mssql
      - ./backend/src/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    networks:
      - lab_stock_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P StrongPassword123! -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lab_stock_backend
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_SERVER=database
      - DB_PORT=1433
      - DB_NAME=lab_stock_management
      - DB_USER=sa
      - DB_PASSWORD=StrongPassword123!
      - DB_ENCRYPT=false
      - DB_TRUST_SERVER_CERTIFICATE=true
      - JWT_SECRET=your_super_secret_jwt_key_here_change_in_production
      - JWT_EXPIRES_IN=24h
      - FRONTEND_URL=http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - lab_stock_network
    restart: unless-stopped
    volumes:
      - ./backend/src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/auth/verify"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: lab_stock_frontend
    environment:
      - VITE_API_URL=http://localhost:3001/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - lab_stock_network
    restart: unless-stopped
    volumes:
      - ./src:/app/src:ro
      - ./public:/app/public:ro

  # Nginx reverse proxy (optionnel pour la production)
  nginx:
    image: nginx:alpine
    container_name: lab_stock_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - lab_stock_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  db_data:
    driver: local

networks:
  lab_stock_network:
    driver: bridge